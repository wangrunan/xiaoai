<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1599962593346" stop="1599968845441">
  <name>scripts.test1_domain</name>
  <labels/>
  <test-cases>
    <test-case start="1599962593346" status="passed" stop="1599962624530">
      <name>TestDomain.test_voice_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599962627901" status="passed" stop="1599962661502">
      <name>TestDomain.test_voice_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599962664951" status="passed" stop="1599962730442">
      <name>TestDomain.test_voice_03</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x04272610&gt;

    def test_voice_03(self):
        time.sleep(2)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“山猫的叫声”
        self.page.sessionpage.input_keyboard_input("山猫的叫声")
        # 对话页点击发送
        self.page.sessionpage.click_send_button()
        # 断言
&gt;       assert self.page.sessionpage.get_text(self.page.sessionpage.small_card_icon) == "听声音"

scripts\test1_domain.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
base\base_action.py:36: in get_text
    return self.find_element6(feature).text
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x04272770&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599962733876" status="passed" stop="1599962760549">
      <name>TestDomain.test_ask_recipe_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599962763959" status="passed" stop="1599962829311">
      <name>TestDomain.test_ask_recipe_02</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x043B3ED0&gt;

    def test_ask_recipe_02(self):
    
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“做蛋挞需要注意什么”
&gt;       self.page.sessionpage.input_keyboard_input("做蛋挞需要注意什么")

scripts\test1_domain.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\sessionpage.py:42: in input_keyboard_input
    self.input(self.keyboard_input,message)
base\base_action.py:30: in input
    self.find_element6(feature).send_keys(text)
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="654fac51-7c07-4d6a-8bda-0a8cf6eac3a8")&gt;
method = &lt;function BaseAction.find_element6.&lt;locals&gt;.&lt;lambda&gt; at 0x04350ED0&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
            return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599962832725" status="passed" stop="1599962888847">
      <name>TestDomain.test_ask_recipe_03</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x0457F1F0&gt;

    def setup(self):
&gt;       self.driver = get_driver()

scripts\test1_domain.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
base\driver.py:16: in get_driver
    driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:129: in __init__
    proxy
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:157: in __init__
    self.start_session(capabilities, browser_profile)
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:204: in start_session
    response = self.execute(RemoteCommand.NEW_SESSION, parameters)
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0457F1D0&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599962892252" status="passed" stop="1599962919028">
      <name>TestDomain.test_ask_recipe_04</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599962922473" status="passed" stop="1599962949323">
      <name>TestDomain.test_class_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599962952723" status="passed" stop="1599962979979">
      <name>TestDomain.test_class_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599962983381" status="passed" stop="1599963012538">
      <name>TestDomain.test_class_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963015954" status="passed" stop="1599963043752">
      <name>TestDomain.test_class_04</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963047170" status="passed" stop="1599963075899">
      <name>TestDomain.test_class_05</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963079303" status="passed" stop="1599963109977">
      <name>TestDomain.test_class_06</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963113426" status="passed" stop="1599963140840">
      <name>TestDomain.test_weather_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963144272" status="passed" stop="1599963170999">
      <name>TestDomain.test_weather_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963174387" status="passed" stop="1599963202047">
      <name>TestDomain.test_weather_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963205428" status="passed" stop="1599963232799">
      <name>TestDomain.test_weather_04</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963236246" status="passed" stop="1599963263542">
      <name>TestDomain.test_weather_05</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963266976" status="passed" stop="1599963293395">
      <name>TestDomain.test_weather_06</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963297762" status="passed" stop="1599963326159">
      <name>TestDomain.test_weather_07</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963329581" status="passed" stop="1599963356737">
      <name>TestDomain.test_weather_08</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963360128" status="passed" stop="1599963389030">
      <name>TestDomain.test_weather_09</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963392458" status="passed" stop="1599963420107">
      <name>TestDomain.test_weather_10</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963423522" status="passed" stop="1599963476647">
      <name>TestDomain.test_weather_11</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x044B89B0&gt;

    def test_weather_11(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“近十六天天气”
&gt;       self.page.sessionpage.input_keyboard_input("近十六天天气")

scripts\test1_domain.py:358: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\sessionpage.py:42: in input_keyboard_input
    self.input(self.keyboard_input,message)
base\base_action.py:30: in input
    self.find_element6(feature).send_keys(text)
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x044B8710&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963480092" status="passed" stop="1599963507009">
      <name>TestDomain.test_weather_12</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963510464" status="passed" stop="1599963537119">
      <name>TestDomain.test_weather_13</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963540556" status="passed" stop="1599963567673">
      <name>TestDomain.test_weather_14</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963571073" status="passed" stop="1599963628883">
      <name>TestDomain.test_weather_15</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x043C15F0&gt;

    def test_weather_15(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“现在天气”
        self.page.sessionpage.input_keyboard_input("现在天气")
        # 对话页点击发送
        self.page.sessionpage.click_send_button()
        # 断言
&gt;       assert self.page.sessionpage.get_text(self.page.sessionpage.small_card_icon) == "小米天气"

scripts\test1_domain.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
base\base_action.py:36: in get_text
    return self.find_element6(feature).text
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x043C1090&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963632285" status="passed" stop="1599963660577">
      <name>TestDomain.test_scence_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963664006" status="failed" stop="1599963774814">
      <name>TestDomain.test_scence_02</name>
      <failure>
        <message>AssertionError: assert '晚上' in '现在是早上了呢，么么哒！'
 +  where '现在是早上了呢，么么哒！' = &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x04490EB0&gt;&gt;(('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']"))
 +    where &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x04490EB0&gt;&gt; = &lt;page.sessionpage.SessionPage object at 0x04490EB0&gt;.get_text
 +      where &lt;page.sessionpage.SessionPage object at 0x04490EB0&gt; = &lt;page.page.Page object at 0x04490C50&gt;.sessionpage
 +        where &lt;page.page.Page object at 0x04490C50&gt; = &lt;scripts.test1_domain.TestDomain object at 0x04490AB0&gt;.page
 +    and   ('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']") = &lt;page.sessionpage.SessionPage object at 0x04490070&gt;.tts_reply
 +      where &lt;page.sessionpage.SessionPage object at 0x04490070&gt; = &lt;page.page.Page object at 0x04490C50&gt;.sessionpage
 +        where &lt;page.page.Page object at 0x04490C50&gt; = &lt;scripts.test1_domain.TestDomain object at 0x04490AB0&gt;.page</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x04490AB0&gt;

    def test_scence_02(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“晚上好”
        self.page.sessionpage.input_keyboard_input("晚上好")
        # 对话页点击发送
        self.page.sessionpage.click_send_button()
        # 断言
&gt;       assert "晚上" in self.page.sessionpage.get_text(self.page.sessionpage.tts_reply)
E       assert '晚上' in '现在是早上了呢，么么哒！'
E        +  where '现在是早上了呢，么么哒！' = &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x04490EB0&gt;&gt;(('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']"))
E        +    where &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x04490EB0&gt;&gt; = &lt;page.sessionpage.SessionPage object at 0x04490EB0&gt;.get_text
E        +      where &lt;page.sessionpage.SessionPage object at 0x04490EB0&gt; = &lt;page.page.Page object at 0x04490C50&gt;.sessionpage
E        +        where &lt;page.page.Page object at 0x04490C50&gt; = &lt;scripts.test1_domain.TestDomain object at 0x04490AB0&gt;.page
E        +    and   ('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']") = &lt;page.sessionpage.SessionPage object at 0x04490070&gt;.tts_reply
E        +      where &lt;page.sessionpage.SessionPage object at 0x04490070&gt; = &lt;page.page.Page object at 0x04490C50&gt;.sessionpage
E        +        where &lt;page.page.Page object at 0x04490C50&gt; = &lt;scripts.test1_domain.TestDomain object at 0x04490AB0&gt;.page

scripts\test1_domain.py:439: AssertionError</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963778245" status="passed" stop="1599963804841">
      <name>TestDomain.test_scence_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963808283" status="failed" stop="1599963922974">
      <name>TestDomain.test_scence_04</name>
      <failure>
        <message>AssertionError: assert '一天' in '早上好！哈哈，周末啦！今天是9月13日，周日，农历庚子年七月二十六。武汉洪山今天晴转小雨，现在阴，晚上11点有小雨，记得带伞20度到27度，和昨天差不多，空气质量指数51，空气还可以'
 +  where '早上好！哈哈，周末啦！今天是9月13日，周日，农历庚子年七月二十六。武汉洪山今天晴转小雨，现在阴，晚上11点有小雨，记得带伞20度到27度，和昨天差不多，空气质量指数51，空气还可以' = &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x04356410&gt;&gt;(('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']"))
 +    where &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x04356410&gt;&gt; = &lt;page.sessionpage.SessionPage object at 0x04356410&gt;.get_text
 +      where &lt;page.sessionpage.SessionPage object at 0x04356410&gt; = &lt;page.page.Page object at 0x04356690&gt;.sessionpage
 +        where &lt;page.page.Page object at 0x04356690&gt; = &lt;scripts.test1_domain.TestDomain object at 0x04356670&gt;.page
 +    and   ('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']") = &lt;page.sessionpage.SessionPage object at 0x043566D0&gt;.tts_reply
 +      where &lt;page.sessionpage.SessionPage object at 0x043566D0&gt; = &lt;page.page.Page object at 0x04356690&gt;.sessionpage
 +        where &lt;page.page.Page object at 0x04356690&gt; = &lt;scripts.test1_domain.TestDomain object at 0x04356670&gt;.page</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x04356670&gt;

    def test_scence_04(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“早上好”
        self.page.sessionpage.input_keyboard_input("早上好")
        # 对话页点击发送
        self.page.sessionpage.click_send_button()
        # 断言
&gt;       assert "一天" in self.page.sessionpage.get_text(self.page.sessionpage.tts_reply)
E       assert '一天' in '早上好！哈哈，周末啦！今天是9月13日，周日，农历庚子年七月二十六。武汉洪山今天晴转小雨，现在阴，晚上11点有小雨，记得带伞20度到27度，和昨天差不多，空气质量指数51，空气还可以'
E        +  where '早上好！哈哈，周末啦！今天是9月13日，周日，农历庚子年七月二十六。武汉洪山今天晴转小雨，现在阴，晚上11点有小雨，记得带伞20度到27度，和昨天差不多，空气质量指数51，空气还可以' = &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x04356410&gt;&gt;(('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']"))
E        +    where &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x04356410&gt;&gt; = &lt;page.sessionpage.SessionPage object at 0x04356410&gt;.get_text
E        +      where &lt;page.sessionpage.SessionPage object at 0x04356410&gt; = &lt;page.page.Page object at 0x04356690&gt;.sessionpage
E        +        where &lt;page.page.Page object at 0x04356690&gt; = &lt;scripts.test1_domain.TestDomain object at 0x04356670&gt;.page
E        +    and   ('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']") = &lt;page.sessionpage.SessionPage object at 0x043566D0&gt;.tts_reply
E        +      where &lt;page.sessionpage.SessionPage object at 0x043566D0&gt; = &lt;page.page.Page object at 0x04356690&gt;.sessionpage
E        +        where &lt;page.page.Page object at 0x04356690&gt; = &lt;scripts.test1_domain.TestDomain object at 0x04356670&gt;.page

scripts\test1_domain.py:464: AssertionError</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963926395" status="passed" stop="1599963952488">
      <name>TestDomain.test_scence_05</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963955895" status="passed" stop="1599963982634">
      <name>TestDomain.test_scence_06</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599963986053" status="passed" stop="1599964012392">
      <name>TestDomain.test_auto_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964015820" status="passed" stop="1599964043739">
      <name>TestDomain.test_auto_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964047121" status="passed" stop="1599964073937">
      <name>TestDomain.test_auto_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964077361" status="passed" stop="1599964103802">
      <name>TestDomain.test_auto_04</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964107215" status="passed" stop="1599964133935">
      <name>TestDomain.test_auto_05</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964137345" status="passed" stop="1599964163648">
      <name>TestDomain.test_auto_06</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964167071" status="passed" stop="1599964193192">
      <name>TestDomain.test_today_date</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964196558" status="passed" stop="1599964223494">
      <name>TestDomain.test_tomorrow_date</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964226920" status="passed" stop="1599964253995">
      <name>TestDomain.test_new_year_date</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964257410" status="passed" stop="1599964284554">
      <name>TestDomain.test_one_date</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964287963" status="passed" stop="1599964314216">
      <name>TestDomain.test_qingming_date</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964317670" status="passed" stop="1599964344062">
      <name>TestDomain.test_America__today_date</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964347398" status="passed" stop="1599964375719">
      <name>TestDomain.test_from_2021_date</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964379135" status="passed" stop="1599964407433">
      <name>TestDomain.test_three_day_ago_date</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964410903" status="passed" stop="1599964441569">
      <name>TestDomain.test_week_date</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964444990" status="passed" stop="1599964472975">
      <name>TestDomain.test_four_day_ago_date</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964476441" status="passed" stop="1599964530461">
      <name>TestDomain.test_calendar</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x0446B4D0&gt;

    def test_calendar(self):
        time.sleep(5)
&gt;       self.page.homepage.click_keyboard()

scripts\test1_domain.py:711: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\homepage.py:43: in click_keyboard
    self.click(self.keyboard)
base\base_action.py:27: in click
    self.find_element6(feature).click()
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x0446B690&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964533883" status="passed" stop="1599964569283">
      <name>TestDomain.test_to_a_poem</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964572698" status="passed" stop="1599964609119">
      <name>TestDomain.test_to_chushibiao_poem</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964612571" status="passed" stop="1599964685177">
      <name>TestDomain.test_next_line_poem</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy. Proxy error: Could not proxy command to remote server. Original error: Error: socket hang up
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x04239FD0&gt;

    def test_next_line_poem(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“床前明月光的下一句是什么”
        self.page.sessionpage.input_keyboard_input("床前明月光的下一句是什么")
        # 对话页点击发送
        self.page.sessionpage.click_send_button()
        #断言
&gt;       assert "疑是地上霜" in self.page.sessionpage.get_text(self.page.sessionpage.big_card_tts_reply)

scripts\test1_domain.py:761: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
base\base_action.py:36: in get_text
    return self.find_element6(feature).text
d:\python3\lib\site-packages\selenium\webdriver\remote\webelement.py:76: in text
    return self._execute(Command.GET_ELEMENT_TEXT)['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webelement.py:633: in _execute
    return self._parent.execute(command, params)
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x042395D0&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy. Proxy error: Could not proxy command to remote server. Original error: Error: socket hang up

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964688620" status="passed" stop="1599964722019">
      <name>TestDomain.test_open_platfrom_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964725435" status="passed" stop="1599964754093">
      <name>TestDomain.test_open_platfrom_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964757520" status="passed" stop="1599964784638">
      <name>TestDomain.test_open_platfrom_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964787996" status="passed" stop="1599964816719">
      <name>TestDomain.test_open_platfrom_04</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964820254" status="passed" stop="1599964847722">
      <name>TestDomain.test_open_platfrom_05</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964851132" status="passed" stop="1599964878275">
      <name>TestDomain.test_ask_custom_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964881713" status="passed" stop="1599964909477">
      <name>TestDomain.test_ask_custom_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964912883" status="passed" stop="1599964940727">
      <name>TestDomain.test_ask_custom_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964944145" status="passed" stop="1599964971193">
      <name>TestDomain.test_ask_attraction_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599964974629" status="passed" stop="1599965003291">
      <name>TestDomain.test_ask_attraction_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965006723" status="passed" stop="1599965034768">
      <name>TestDomain.test_ask_attraction_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965038213" status="passed" stop="1599965065166">
      <name>TestDomain.test_ask_attraction_04</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965068581" status="passed" stop="1599965096376">
      <name>TestDomain.test_ask_attraction_05</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965099781" status="passed" stop="1599965127352">
      <name>TestDomain.test_ask_film</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965130745" status="passed" stop="1599965157917">
      <name>TestDomain.test_cyclopedia_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965161441" status="passed" stop="1599965188156">
      <name>TestDomain.test_cyclopedia_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965191594" status="passed" stop="1599965218963">
      <name>TestDomain.test_cyclopedia_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965222425" status="passed" stop="1599965277633">
      <name>TestDomain.test_cyclopedia_04</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x042EC4F0&gt;

    def test_cyclopedia_04(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“百科一下小米公司”
        self.page.sessionpage.input_keyboard_input("百科一下小米公司")
        # 对话页点击发送
&gt;       self.page.sessionpage.click_send_button()

scripts\test1_domain.py:1082: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\sessionpage.py:46: in click_send_button
    self.click(self.send_button)
base\base_action.py:27: in click
    self.find_element6(feature).click()
d:\python3\lib\site-packages\selenium\webdriver\remote\webelement.py:80: in click
    self._execute(Command.CLICK_ELEMENT)
d:\python3\lib\site-packages\selenium\webdriver\remote\webelement.py:633: in _execute
    return self._parent.execute(command, params)
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x042EC750&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965281035" status="passed" stop="1599965310227">
      <name>TestDomain.test_cyclopedia_05</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965313680" status="passed" stop="1599965341875">
      <name>TestDomain.test_cyclopedia_06</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965345325" status="passed" stop="1599965371126">
      <name>TestDomain.test_ask_time_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965374584" status="passed" stop="1599965428175">
      <name>TestDomain.test_ask_time_02</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x045916F0&gt;

    def test_ask_time_02(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“现在几点了”
&gt;       self.page.sessionpage.input_keyboard_input("现在几点了")

scripts\test1_domain.py:1132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\sessionpage.py:42: in input_keyboard_input
    self.input(self.keyboard_input,message)
base\base_action.py:30: in input
    self.find_element6(feature).send_keys(text)
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x04591030&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965431565" status="passed" stop="1599965458323">
      <name>TestDomain.test_help</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965461776" status="passed" stop="1599965488998">
      <name>TestDomain.test_estates_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965492403" status="passed" stop="1599965519247">
      <name>TestDomain.test_estates_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965523210" status="passed" stop="1599965578322">
      <name>TestDomain.test_customer_01</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x01003170&gt;

    def test_customer_01(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“Air2耳机如何充电”
        self.page.sessionpage.input_keyboard_input("Air2耳机如何充电")
        # 对话页点击发送
&gt;       self.page.sessionpage.click_send_button()

scripts\test1_domain.py:1204: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\sessionpage.py:46: in click_send_button
    self.click(self.send_button)
base\base_action.py:27: in click
    self.find_element6(feature).click()
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x01003EF0&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965581736" status="passed" stop="1599965608375">
      <name>TestDomain.test_customer_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965611766" status="passed" stop="1599965638506">
      <name>TestDomain.test_customer_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965641949" status="passed" stop="1599965668623">
      <name>TestDomain.test_customer_04</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965672047" status="passed" stop="1599965731701">
      <name>TestDomain.test_customer_05</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x042E9850&gt;

    def test_customer_05(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“小米和红米有什么区别”
        self.page.sessionpage.input_keyboard_input("小米和红米有什么区别")
        # 对话页点击发送
        self.page.sessionpage.click_send_button()
        time.sleep(2)
        # 断言
&gt;       assert self.page.sessionpage.get_text(self.page.sessionpage.big_card_icon) == "客户服务"

scripts\test1_domain.py:1259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
base\base_action.py:36: in get_text
    return self.find_element6(feature).text
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x042E9830&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965735187" status="passed" stop="1599965763424">
      <name>TestDomain.test_translation_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965766948" status="passed" stop="1599965793727">
      <name>TestDomain.test_translation_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965797162" status="passed" stop="1599965824954">
      <name>TestDomain.test_translation_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965828382" status="passed" stop="1599965880624">
      <name>TestDomain.test_ask_medical_01</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x045A05F0&gt;

    def test_ask_medical_01(self):
        time.sleep(3)
        # 首页点击键盘
&gt;       self.page.homepage.click_keyboard()

scripts\test1_domain.py:1335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\homepage.py:43: in click_keyboard
    self.click(self.keyboard)
base\base_action.py:27: in click
    self.find_element6(feature).click()
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x045A0050&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965884070" status="passed" stop="1599965912440">
      <name>TestDomain.test_ask_medical_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965915915" status="passed" stop="1599965943701">
      <name>TestDomain.test_ask_medical_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965947141" status="passed" stop="1599965973606">
      <name>TestDomain.test_ask_medical_04</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599965977031" status="passed" stop="1599966029861">
      <name>TestDomain.test_ask_medical_05</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x04437830&gt;

    def test_ask_medical_05(self):
        time.sleep(3)
        # 首页点击键盘
&gt;       self.page.homepage.click_keyboard()

scripts\test1_domain.py:1390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\homepage.py:43: in click_keyboard
    self.click(self.keyboard)
base\base_action.py:27: in click
    self.find_element6(feature).click()
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x04437B30&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966033323" status="passed" stop="1599966061874">
      <name>TestDomain.test_ask_medical_06</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966065283" status="passed" stop="1599966093430">
      <name>TestDomain.test_ask_medical_07</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966096932" status="passed" stop="1599966124364">
      <name>TestDomain.test_ask_restriction_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966127782" status="passed" stop="1599966179065">
      <name>TestDomain.test_ask_restriction_02</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x010021D0&gt;

    def test_ask_restriction_02(self):
        time.sleep(3)
        # 首页点击键盘
&gt;       self.page.homepage.click_keyboard()

scripts\test1_domain.py:1443: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\homepage.py:43: in click_keyboard
    self.click(self.keyboard)
base\base_action.py:27: in click
    self.find_element6(feature).click()
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x01002390&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966182511" status="passed" stop="1599966209778">
      <name>TestDomain.test_ask_restriction_04</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966213180" status="passed" stop="1599966240587">
      <name>TestDomain.test_ask_restriction_05</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966244015" status="passed" stop="1599966315774">
      <name>TestDomain.test_remind_01</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x044A7C30&gt;

    def test_remind_01(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“下午2点半提醒我喝水”
        self.page.sessionpage.input_keyboard_input("下午2点半提醒我喝水")
        # 对话页点击发送
        self.page.sessionpage.click_send_button()
        # 断言
&gt;       assert self.page.sessionpage.get_text(self.page.sessionpage.small_card_icon) == "日历"

scripts\test1_domain.py:1488: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
base\base_action.py:36: in get_text
    return self.find_element6(feature).text
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="945b2916-7c13-4340-af81-c0d07c4c01ea")&gt;
method = &lt;function BaseAction.find_element6.&lt;locals&gt;.&lt;lambda&gt; at 0x04462978&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
            return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966319234" status="passed" stop="1599966346476">
      <name>TestDomain.test_remind_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966349855" status="passed" stop="1599966381993">
      <name>TestDomain.test_joke_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966385489" status="passed" stop="1599966424878">
      <name>TestDomain.test_child_joke</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966428271" status="failed" stop="1599966541895">
      <name>TestDomain.test_chatt_01</name>
      <failure>
        <message>AssertionError: assert '工程师' in '我的家人有个伟大的名字，叫科技工作者，又名程序员'
 +  where '我的家人有个伟大的名字，叫科技工作者，又名程序员' = &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x01017470&gt;&gt;(('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']"))
 +    where &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x01017470&gt;&gt; = &lt;page.sessionpage.SessionPage object at 0x01017470&gt;.get_text
 +      where &lt;page.sessionpage.SessionPage object at 0x01017470&gt; = &lt;page.page.Page object at 0x01017D10&gt;.sessionpage
 +        where &lt;page.page.Page object at 0x01017D10&gt; = &lt;scripts.test1_domain.TestDomain object at 0x01017CF0&gt;.page
 +    and   ('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']") = &lt;page.sessionpage.SessionPage object at 0x01017130&gt;.tts_reply
 +      where &lt;page.sessionpage.SessionPage object at 0x01017130&gt; = &lt;page.page.Page object at 0x01017D10&gt;.sessionpage
 +        where &lt;page.page.Page object at 0x01017D10&gt; = &lt;scripts.test1_domain.TestDomain object at 0x01017CF0&gt;.page</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x01017CF0&gt;

    def test_chatt_01(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“你爸爸妈妈是谁”
        self.page.sessionpage.input_keyboard_input("你爸爸妈妈是谁")
        # 对话页点击发送
        self.page.sessionpage.click_send_button()
        # 断言
&gt;       assert "工程师" in self.page.sessionpage.get_text(self.page.sessionpage.tts_reply)
E       assert '工程师' in '我的家人有个伟大的名字，叫科技工作者，又名程序员'
E        +  where '我的家人有个伟大的名字，叫科技工作者，又名程序员' = &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x01017470&gt;&gt;(('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']"))
E        +    where &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x01017470&gt;&gt; = &lt;page.sessionpage.SessionPage object at 0x01017470&gt;.get_text
E        +      where &lt;page.sessionpage.SessionPage object at 0x01017470&gt; = &lt;page.page.Page object at 0x01017D10&gt;.sessionpage
E        +        where &lt;page.page.Page object at 0x01017D10&gt; = &lt;scripts.test1_domain.TestDomain object at 0x01017CF0&gt;.page
E        +    and   ('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']") = &lt;page.sessionpage.SessionPage object at 0x01017130&gt;.tts_reply
E        +      where &lt;page.sessionpage.SessionPage object at 0x01017130&gt; = &lt;page.page.Page object at 0x01017D10&gt;.sessionpage
E        +        where &lt;page.page.Page object at 0x01017D10&gt; = &lt;scripts.test1_domain.TestDomain object at 0x01017CF0&gt;.page

scripts\test1_domain.py:1551: AssertionError</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966545318" status="failed" stop="1599966702450">
      <name>TestDomain.test_chatt_02</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x01013B90&gt;

    def test_chatt_02(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“陪我聊天”
&gt;       self.page.sessionpage.input_keyboard_input("陪我聊天")

scripts\test1_domain.py:1559: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\sessionpage.py:42: in input_keyboard_input
    self.input(self.keyboard_input,message)
base\base_action.py:30: in input
    self.find_element6(feature).send_keys(text)
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="8162b6a5-f407-44ae-93ba-2accc9d8835c")&gt;
method = &lt;function BaseAction.find_element6.&lt;locals&gt;.&lt;lambda&gt; at 0x044625D0&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
            return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966705832" status="failed" stop="1599966859805">
      <name>TestDomain.test_chatt_03</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x0459D470&gt;

    def test_chatt_03(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“你几岁了”
&gt;       self.page.sessionpage.input_keyboard_input("你几岁了")

scripts\test1_domain.py:1583: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\sessionpage.py:42: in input_keyboard_input
    self.input(self.keyboard_input,message)
base\base_action.py:30: in input
    self.find_element6(feature).send_keys(text)
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="f9884061-025f-4fce-8072-ab41eecd46ec")&gt;
method = &lt;function BaseAction.find_element6.&lt;locals&gt;.&lt;lambda&gt; at 0x0102A618&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
            return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966863246" status="passed" stop="1599966891442">
      <name>TestDomain.test_ask_stock_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966894815" status="passed" stop="1599966924107">
      <name>TestDomain.test_ask_stock_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966927539" status="passed" stop="1599966956371">
      <name>TestDomain.test_ask_stock_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966959804" status="passed" stop="1599966988508">
      <name>TestDomain.test_person_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599966991982" status="passed" stop="1599967019082">
      <name>TestDomain.test_person_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967022517" status="passed" stop="1599967079568">
      <name>TestDomain.test_person_03</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x045A0790&gt;

    def test_person_03(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“泰坦尼克号的主演”
&gt;       self.page.sessionpage.input_keyboard_input("泰坦尼克号的主演")

scripts\test1_domain.py:1665: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\sessionpage.py:42: in input_keyboard_input
    self.input(self.keyboard_input,message)
base\base_action.py:30: in input
    self.find_element6(feature).send_keys(text)
d:\python3\lib\site-packages\selenium\webdriver\remote\webelement.py:479: in send_keys
    'value': keys_to_typing(value)})
d:\python3\lib\site-packages\selenium\webdriver\remote\webelement.py:633: in _execute
    return self._parent.execute(command, params)
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x0447FDF0&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967083495" status="passed" stop="1599967111084">
      <name>TestDomain.test_qa_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967114497" status="passed" stop="1599967141786">
      <name>TestDomain.test_qa_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967145219" status="passed" stop="1599967172185">
      <name>TestDomain.test_qa_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967175611" status="passed" stop="1599967229264">
      <name>TestDomain.test_followme_01</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x04356370&gt;

    def test_followme_01(self):
        time.sleep(3)
        # 首页点击键盘
        self.page.homepage.click_keyboard()
        # 对话页输入“跟我学叫我哥哥”
&gt;       self.page.sessionpage.input_keyboard_input("跟我学叫我哥哥")

scripts\test1_domain.py:1720: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\sessionpage.py:42: in input_keyboard_input
    self.input(self.keyboard_input,message)
base\base_action.py:30: in input
    self.find_element6(feature).send_keys(text)
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x04356DB0&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967232707" status="passed" stop="1599967267602">
      <name>TestDomain.test_followme_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967270986" status="passed" stop="1599967298769">
      <name>TestDomain.test_ask_constellation_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967302170" status="passed" stop="1599967330099">
      <name>TestDomain.test_ask_constellation_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967333521" status="passed" stop="1599967392116">
      <name>TestDomain.test_ask_constellation_03</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x01059A30&gt;

    def setup(self):
&gt;       self.driver = get_driver()

scripts\test1_domain.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
base\driver.py:16: in get_driver
    driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:129: in __init__
    proxy
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:157: in __init__
    self.start_session(capabilities, browser_profile)
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:204: in start_session
    response = self.execute(RemoteCommand.NEW_SESSION, parameters)
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x01059A50&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967395550" status="passed" stop="1599967423025">
      <name>TestDomain.test_ask_constellation_04</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967426469" status="passed" stop="1599967455047">
      <name>TestDomain.test_ask_constellation_05</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967458527" status="passed" stop="1599967488574">
      <name>TestDomain.test_ask_openplatform_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967491984" status="passed" stop="1599967519251">
      <name>TestDomain.test_stock_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967522690" status="passed" stop="1599967555396">
      <name>TestDomain.test_music_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967558857" status="passed" stop="1599967588289">
      <name>TestDomain.test_music_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967591752" status="passed" stop="1599967618129">
      <name>TestDomain.test_music_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967621543" status="passed" stop="1599967678649">
      <name>TestDomain.test_music_04</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x00FFD7B0&gt;

&gt;   ???

scripts\test1_domain.py:2054: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
base\base_action.py:36: in get_text
    return self.find_element6(feature).text
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x00FFDB70&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: read ECONNRESET

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967682075" status="passed" stop="1599967720771">
      <name>TestDomain.test_music_05</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967724165" status="passed" stop="1599967753482">
      <name>TestDomain.test_music_06</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967756955" status="passed" stop="1599967783004">
      <name>TestDomain.test_music_07</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967786404" status="failed" stop="1599967906638">
      <name>TestDomain.test_music_08</name>
      <failure>
        <message>AssertionError: assert '单曲循环' in '好呀，我也喜欢这首歌哦'
 +  where '好呀，我也喜欢这首歌哦' = &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x00FAFD90&gt;&gt;(('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']"))
 +    where &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x00FAFD90&gt;&gt; = &lt;page.sessionpage.SessionPage object at 0x00FAFD90&gt;.get_text
 +      where &lt;page.sessionpage.SessionPage object at 0x00FAFD90&gt; = &lt;page.page.Page object at 0x00FAF970&gt;.sessionpage
 +        where &lt;page.page.Page object at 0x00FAF970&gt; = &lt;scripts.test1_domain.TestDomain object at 0x00FAF830&gt;.page
 +    and   ('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']") = &lt;page.sessionpage.SessionPage object at 0x00FAFC70&gt;.tts_reply
 +      where &lt;page.sessionpage.SessionPage object at 0x00FAFC70&gt; = &lt;page.page.Page object at 0x00FAF970&gt;.sessionpage
 +        where &lt;page.page.Page object at 0x00FAF970&gt; = &lt;scripts.test1_domain.TestDomain object at 0x00FAF830&gt;.page</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x00FAF830&gt;

&gt;   ???
E   assert '单曲循环' in '好呀，我也喜欢这首歌哦'
E    +  where '好呀，我也喜欢这首歌哦' = &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x00FAFD90&gt;&gt;(('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']"))
E    +    where &lt;bound method BaseAction.get_text of &lt;page.sessionpage.SessionPage object at 0x00FAFD90&gt;&gt; = &lt;page.sessionpage.SessionPage object at 0x00FAFD90&gt;.get_text
E    +      where &lt;page.sessionpage.SessionPage object at 0x00FAFD90&gt; = &lt;page.page.Page object at 0x00FAF970&gt;.sessionpage
E    +        where &lt;page.page.Page object at 0x00FAF970&gt; = &lt;scripts.test1_domain.TestDomain object at 0x00FAF830&gt;.page
E    +    and   ('xpath', "//*[@resource-id='com.xiaomi.xiaoailite:id/tv_toast_view']") = &lt;page.sessionpage.SessionPage object at 0x00FAFC70&gt;.tts_reply
E    +      where &lt;page.sessionpage.SessionPage object at 0x00FAFC70&gt; = &lt;page.page.Page object at 0x00FAF970&gt;.sessionpage
E    +        where &lt;page.page.Page object at 0x00FAF970&gt; = &lt;scripts.test1_domain.TestDomain object at 0x00FAF830&gt;.page

scripts\test1_domain.py:2114: AssertionError</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967910056" status="passed" stop="1599967936515">
      <name>TestDomain.test_music_09</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967939961" status="passed" stop="1599967966983">
      <name>TestDomain.test_music_10</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599967970438" status="passed" stop="1599967997277">
      <name>TestDomain.test_music_11</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968000659" status="passed" stop="1599968028477">
      <name>TestDomain.test_news</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968031918" status="passed" stop="1599968058577">
      <name>TestDomain.test_insignificance_query</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968062016" status="passed" stop="1599968089575">
      <name>TestDomain.test_dictionary_01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968093009" status="passed" stop="1599968120347">
      <name>TestDomain.test_dictionary_02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968123756" status="passed" stop="1599968151455">
      <name>TestDomain.test_dictionary_03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968154888" status="passed" stop="1599968183246">
      <name>TestDomain.test_dictionary_04</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968186619" status="passed" stop="1599968213774">
      <name>TestDomain.test_dictionary_05</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968217168" status="passed" stop="1599968244773">
      <name>TestDomain.test_dictionary_06</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968248223" status="passed" stop="1599968275711">
      <name>TestDomain.test_dictionary_07</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968279162" status="passed" stop="1599968307234">
      <name>TestDomain.test_dictionary_08</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968310684" status="passed" stop="1599968338842">
      <name>TestDomain.test_dictionary_09</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968342249" status="passed" stop="1599968369989">
      <name>TestDomain.test_dictionary_10</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968373414" status="passed" stop="1599968429111">
      <name>TestDomain.test_phone_battery</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x044A1E70&gt;

&gt;   ???

scripts\test1_domain.py:2317: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
base\base_action.py:36: in get_text
    return self.find_element6(feature).text
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x044B8A70&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968432554" status="passed" stop="1599968466972">
      <name>TestDomain.test_feedback_1</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968470426" status="passed" stop="1599968512136">
      <name>TestDomain.test_feedback_2</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968515590" status="passed" stop="1599968544773">
      <name>TestDomain.test_composition01</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968548209" status="passed" stop="1599968576328">
      <name>TestDomain.test_composition02</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968579836" status="passed" stop="1599968608141">
      <name>TestDomain.test_composition03</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968611557" status="passed" stop="1599968639516">
      <name>TestDomain.test_composition04</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968643280" status="passed" stop="1599968671339">
      <name>TestDomain.test_composition05</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968674751" status="passed" stop="1599968730378">
      <name>TestDomain.test_composition06</name>
      <failure>
        <message>WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up
</message>
        <stack-trace>self = &lt;scripts.test1_domain.TestDomain object at 0x041E18F0&gt;

&gt;   ???

scripts\test1_domain.py:2463: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
page\sessionpage.py:46: in click_send_button
    self.click(self.send_button)
base\base_action.py:27: in click
    self.find_element6(feature).click()
base\base_action.py:17: in find_element6
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\selenium\webdriver\support\wait.py:71: in until
    value = method(self._driver)
base\base_action.py:17: in &lt;lambda&gt;
    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))
d:\python3\lib\site-packages\appium\webdriver\webdriver.py:258: in find_element
    'value': value})['value']
d:\python3\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:29: in check_response
    raise wde
d:\python3\lib\site-packages\appium\webdriver\errorhandler.py:24: in check_response
    super(MobileErrorHandler, self).check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;appium.webdriver.errorhandler.MobileErrorHandler object at 0x041E1FB0&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"An unknown server-side error occurred while pro...\node_modules\\\\appium\\\\node_modules\\\\babel-runtime\\\\regenerator\\\\runtime.js:136:37)\\n    at &lt;anonymous&gt;"}}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up

d:\python3\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968733793" status="passed" stop="1599968761680">
      <name>TestDomain.test_composition07</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968764988" status="passed" stop="1599968789947">
      <name>TestDomain.test_composition08</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968793320" status="passed" stop="1599968817728">
      <name>TestDomain.test_apple_english</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1599968821089" status="passed" stop="1599968845441">
      <name>TestDomain.test_query_translation</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="13864-MainThread"/>
        <label name="host" value="DESKTOP-IJRQON0"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
  </test-cases>
</ns0:test-suite>

{"name": "test_school_timetable_add", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: A session is either terminated or not started", "trace": "self = <scripts.test_short_cut.TestShortCut object at 0x0000022284D12400>\n\n    def test_school_timetable_add(self):\n        # step1 首页点击个人中心按钮\n        time.sleep(3)\n        self.page.homepage.click_center_button()\n    \n        #step2 点击个人中心页面“快捷方式”\n        self.page.centerpage.click_shortcut_tab()\n    \n        # # step3 断言是否跳转到“快捷方式”页面\n        # assert self.page.stortcutpage.get_text(self.page.stortcutpage.stort_cut_title)=='快捷方式'\n    \n    \n        time.sleep(2)\n        #step4 点击快捷方式页面--课程表——添加\n    \n        self.page.shortcutpage.click_school_timetable_add()\n    \n        # step5 判断是否有添加到桌面的弹窗\n        #if self.driver.find_elements_by_xpath(\"//*[contains(@resource-id,'widget_name')]\"):\n        if self.page.shortcutpage.is_add_desk_pop_exist():\n            # step6 有添加到桌面的弹窗就点击添加\n            self.page.shortcutpage.click_school_home_screen_add()\n            time.sleep(1)\n    \n            # step7 判断是否有已尝试添加到桌面的弹窗\n            #if self.driver.find_elements_by_id(\"com.xiaomi.xiaoailite:id/btn_confirm\"):\n            #if self.page.shortcutpage.is_button_exist(self.page.shortcutpage.is_add_desk_allary_exist):\n            if self.page.shortcutpage.is_add_desk_allary_exist():\n    \n                # step8 判断是否有已尝试添加到桌面的弹窗，有就点击确定\n                self.page.shortcutpage.click_add_to_the_desktop_confirm()\n    \n            # step8 点击快捷方式页面--课程表——添加\n            self.page.shortcutpage.click_school_timetable_add()\n    \n            # step9 断言是否创建成功\n            assert self.page.shortcutpage.is_toast_exist(\"该应用桌面快捷方式已创建\")\n    \n    \n        # step10 没出现弹窗，直接断言是否创建成功\n        else:\n>           assert self.page.shortcutpage.is_toast_exist(\"该应用桌面快捷方式已创建\")\n\ntest_short_cut.py:186: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\base\\base_action.py:48: in is_toast_exist\n    self.find_element6(message_xpath, 5, 0.1)\n..\\base\\base_action.py:17: in find_element6\n    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))\nD:\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: in until\n    value = method(self._driver)\n..\\base\\base_action.py:17: in <lambda>\n    return WebDriverWait(self.driver, timeout, poll).until(lambda x:x.find_element(by, value))\nD:\\Python\\Python38\\lib\\site-packages\\appium\\webdriver\\webdriver.py:256: in find_element\n    return self.execute(RemoteCommand.FIND_ELEMENT, {\nD:\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\nD:\\Python\\Python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:29: in check_response\n    raise wde\nD:\\Python\\Python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:24: in check_response\n    super(MobileErrorHandler, self).check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000022284F346A0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"A session is either terminated or not star...t endReadableNT (_stream_readable.js:1090:12)\\\\n    at process._tickCallback (internal/process/next_tick.js:63:19)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: A session is either terminated or not started\n\nD:\\Python\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: InvalidSessionIdException"}, "start": 1599806837422, "stop": 1599806996580, "uuid": "dd3410d9-c413-42f8-9b43-337f00203314", "historyId": "b986d1ec01faf10ff11b785414db70ea", "fullName": "scripts.test_short_cut.TestShortCut#test_school_timetable_add", "labels": [{"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test_short_cut"}, {"name": "subSuite", "value": "TestShortCut"}, {"name": "host", "value": "M-EMEOND1EH3V3K"}, {"name": "thread", "value": "2936-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test_short_cut"}]}